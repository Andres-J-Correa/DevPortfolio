{"version":3,"file":"static/js/528.dbff57a5.chunk.js","mappings":"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","sources":["services/interviewsService.js","components/projects/interviews/NewInterview.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nconst url = `${process.env.REACT_APP_API_HOST_PREFIX}`;\nconst baseConfig = {\n  headers: { \"content-type\": \"application/json\" },\n  crossDomain: true,\n};\n\nexport const getInterviewGrading = async (predictionId) => {\n  const timeOut = 4000;\n  let count = 0,\n    interval = 1000,\n    maxCount = Math.floor(timeOut / interval),\n    intervalId;\n  const config = {\n    method: \"GET\",\n    url: `${url}/InterviewGrading/${predictionId}`,\n    ...baseConfig,\n  };\n\n  const pollingCallback = async (resolve, reject) => {\n    count++;\n    let deferredResponse;\n    try {\n      if (count % 3 === 0) {\n        toast.info(\"Still working on this for you...\");\n      }\n      deferredResponse = await axios(config);\n      clearInterval(intervalId);\n      resolve(deferredResponse);\n    } catch (err) {\n      if (count >= maxCount) {\n        clearInterval(intervalId);\n        reject(err);\n      } else if (err.response.status !== 404) {\n        clearInterval(intervalId);\n        reject(err);\n      }\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    intervalId = setInterval(pollingCallback, interval, resolve, reject);\n  });\n};\n\nexport const requestInterviewGrading = async (payload) => {\n  const config = {\n    method: \"POST\",\n    data: payload,\n    url: `${url}/InterviewGrading/create`,\n    ...baseConfig,\n  };\n\n  try {\n    const res = axios(config);\n\n    if (!res) {\n      throw new Error(\"No response from requestInterviewGrading\");\n    }\n\n    return res;\n  } catch (error) {\n    Promise.reject(error);\n  }\n};\n\nexport const getInterviewQuestions = async (topic) => {\n  const config = {\n    method: \"GET\",\n    url: `${url}/InterviewQuestions/${topic}`,\n    ...baseConfig,\n  };\n\n  try {\n    const res = axios(config);\n\n    if (!res) {\n      throw new Error(\"No response from requestInterviewGrading\");\n    }\n\n    return res;\n  } catch (error) {\n    Promise.reject(error);\n  }\n};\n","import { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  getInterviewQuestions,\n  requestInterviewGrading,\n  getInterviewGrading,\n} from \"../../../services/interviewsService\";\nimport { toast } from \"react-toastify\";\nimport \"./interviews.css\";\n\nconst NewInterview = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gradingResults, setGradingResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [interviewFinished, setInterviewFinished] = useState(false);\n  const [topic, setTopic] = useState(null);\n\n  const { state } = useLocation();\n\n  const shouldInterviewFinish = useMemo(\n    () =>\n      gradingResults.length > 0 && questions.length === 0 && !!!currentQuestion,\n    [questions, currentQuestion, gradingResults]\n  );\n\n  const chatboxRef = useRef(null);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const finishInterview = useCallback(() => {\n    setLoading(true);\n\n    let finalGrade = gradingResults.reduce((acc, curr) => acc + curr.grade, 0);\n\n    finalGrade = finalGrade / gradingResults.length;\n\n    setTimeout(() => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          sender: \"ai\",\n          text: `Your final grade is: ${finalGrade}`,\n        },\n      ]);\n\n      setLoading(false);\n      setInterviewFinished(true);\n    }, 1000);\n  }, [gradingResults]);\n\n  const sendNextQuestion = () => {\n    if (!!questions.length) {\n      const nextQuestion = questions.pop();\n\n      setLoading(true);\n      setTimeout(() => {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          {\n            sender: \"ai\",\n            text: `Next question: ${nextQuestion.question}`,\n          },\n        ]);\n\n        setCurrentQuestion(nextQuestion);\n        setLoading(false);\n      }, 1000);\n    } else {\n      setCurrentQuestion(null);\n    }\n  };\n\n  const gradeAnswer = async (answer) => {\n    try {\n      setLoading(true);\n\n      const payload = {\n        question: currentQuestion.question,\n        answer,\n      };\n\n      const requestResponse = await requestInterviewGrading(payload);\n      if (!!!requestResponse?.data) {\n        throw new Error(\"Error sending grading request\");\n      }\n\n      const gradingResponse = await getInterviewGrading(requestResponse.data);\n      if (!!!gradingResponse?.data?.gradingResult) {\n        throw new Error(\"Error getting grading results\");\n      }\n\n      setGradingResults((prev) => [\n        ...prev,\n        gradingResponse.data.gradingResult,\n      ]);\n\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          sender: \"ai\",\n          text: `${gradingResponse.data.gradingResult.feedback}`,\n        },\n      ]);\n\n      setLoading(false);\n\n      sendNextQuestion();\n    } catch (err) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          sender: \"ai\",\n          text: `I had difficulties analyzing your response, please re-send it.`,\n        },\n      ]);\n      setLoading(false);\n    }\n  };\n\n  const handleSend = (e) => {\n    if (e.shiftKey && e.key === \"Enter\") {\n      e.preventDefault();\n      var start = e.target.selectionStart;\n      var end = e.target.selectionEnd;\n      var value = e.target.value;\n      e.target.value = value.substring(0, start) + \"\\n\" + value.substring(end);\n      e.target.selectionStart = e.target.selectionEnd = start + 1;\n    }\n\n    if (\n      (e.key === \"Enter\" && !!!e.shiftKey) ||\n      e.currentTarget?.dataset?.send === \"1\"\n    ) {\n      e.preventDefault();\n      const message = input.trim();\n\n      let messageWithoutExtraLines = message\n        .replace(/(\\r\\n|\\n|\\r)+/gm, \"\")\n        .trim();\n      if (messageWithoutExtraLines.length > 0) {\n        setMessages([...messages, { sender: \"user\", text: message }]);\n\n        gradeAnswer(message);\n\n        setInput(\"\");\n      }\n    }\n  };\n\n  const sendInitialMessages = useCallback(\n    (firstQuestion) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          sender: \"ai\",\n          text: `Welcome to the ${topic.text} interview. During this session, I will ask you five technical questions. Please respond to each question to the best of your ability. At the end of the interview, I will provide you with your final grade. Let's get started with the first question:`,\n        },\n      ]);\n\n      setLoading(true);\n\n      setTimeout(() => {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          {\n            sender: \"ai\",\n            text: `${firstQuestion.question}`,\n          },\n        ]);\n\n        setCurrentQuestion(firstQuestion);\n        setLoading(false);\n      }, 2000);\n    },\n    [topic]\n  );\n\n  const fetchInterviewQuestions = useCallback(async () => {\n    try {\n      if (!!topic?.id) {\n        setLoading(true);\n        const res = await getInterviewQuestions(topic.id);\n        const interviewQuestions = res.data;\n\n        if (!interviewQuestions?.length) {\n          throw new Error(\"No questions found.\");\n        }\n\n        const firstQuestion = interviewQuestions.pop();\n\n        setLoading(false);\n        sendInitialMessages(firstQuestion);\n        setQuestions(interviewQuestions);\n      }\n    } catch (err) {\n      setLoading(false);\n      toast.error(`Error fetching interview questions. Please try again`);\n    }\n  }, [topic, sendInitialMessages]);\n\n  useEffect(() => {\n    fetchInterviewQuestions();\n  }, [fetchInterviewQuestions]);\n\n  useEffect(() => {\n    setTopic({ ...state });\n  }, [state]);\n\n  useEffect(() => {\n    if (shouldInterviewFinish) {\n      finishInterview();\n    }\n  }, [finishInterview, shouldInterviewFinish]);\n\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"new-interview__root\">\n      <h1 className=\"new-interview__header\">{topic?.text} Interview</h1>\n      <div className=\"new-interview__chatbox-container\">\n        {\" \"}\n        <div className=\"new-interview__chatbox\" ref={chatboxRef}>\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`new-interview__message new-interview__message--${message.sender}`}\n            >\n              <div\n                className={`new-interview__message-box new-interview__message-box--${message.sender}`}\n              >\n                {message.text}\n              </div>\n            </div>\n          ))}\n          {loading && (\n            <div className=\"react-interview__message react-interview__message--ai\">\n              <div className=\"react-interview__loader\">\n                <div className=\"react-interview__loader-dots\">\n                  <div className=\"react-interview__loader-dot\"></div>\n                  <div className=\"react-interview__loader-dot\"></div>\n                  <div className=\"react-interview__loader-dot\"></div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"new-interview__input\">\n          <textarea\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleSend}\n            rows=\"3\"\n            placeholder=\"Type your answer...\"\n            disabled={loading || interviewFinished}\n            autoCorrect=\"on\"\n          />\n          <button\n            onClick={handleSend}\n            data-send=\"1\"\n            disabled={loading || interviewFinished}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NewInterview;\n"],"names":["url","concat","process","baseConfig","headers","crossDomain","NewInterview","messages","setMessages","useState","input","setInput","questions","setQuestions","currentQuestion","setCurrentQuestion","gradingResults","setGradingResults","loading","setLoading","interviewFinished","setInterviewFinished","topic","setTopic","state","useLocation","shouldInterviewFinish","useMemo","length","chatboxRef","useRef","finishInterview","useCallback","finalGrade","reduce","acc","curr","grade","setTimeout","prevMessages","sender","text","gradeAnswer","async","_gradingResponse$data","payload","question","answer","requestResponse","config","method","data","res","axios","Error","error","Promise","reject","requestInterviewGrading","gradingResponse","intervalId","count","maxCount","Math","floor","timeOut","predictionId","pollingCallback","resolve","deferredResponse","toast","info","clearInterval","err","response","status","setInterval","getInterviewGrading","gradingResult","prev","feedback","sendNextQuestion","nextQuestion","pop","handleSend","e","_e$currentTarget","_e$currentTarget$data","shiftKey","key","preventDefault","start","target","selectionStart","end","selectionEnd","value","substring","currentTarget","dataset","send","message","trim","replace","sendInitialMessages","firstQuestion","fetchInterviewQuestions","id","getInterviewQuestions","interviewQuestions","useEffect","current","scrollTop","scrollHeight","_jsxs","className","children","ref","map","index","_jsx","onChange","onKeyDown","rows","placeholder","disabled","autoCorrect","onClick"],"sourceRoot":""}